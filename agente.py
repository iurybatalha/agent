import typer
from pathlib import Path
from textwrap import dedent
from datetime import datetime
from typing import Optional
from rich.prompt import Prompt

from agno.agent import Agent
from agno.models.huggingface import HuggingFace
from agno.knowledge.pdf_url import PDFUrlKnowledgeBase
from agno.knowledge.csv import CSVKnowledgeBase, CSVReader
from agno.knowledge.pdf import PDFKnowledgeBase, PDFReader
from agno.knowledge.text import TextKnowledgeBase, TextReader
from agno.vectordb.lancedb import LanceDb
from agno.vectordb.search import SearchType
from agno.embedder.huggingface import HuggingfaceCustomEmbedder
from agno.embedder.ollama import OllamaEmbedder
from agno.models.ollama import OllamaTools
from agno.models.ollama import Ollama
import lancedb





# whitch archive type
type = "pdf"
db_name = "artigo_llama"

#db_name = "table_model"

vector_db = LanceDb(
    table_name=db_name,
    uri="/tmp/lancedb",
    embedder=OllamaEmbedder(id="bge-large",dimensions=1024),
    search_type=SearchType.hybrid,
)
if 'pdf' == type:
    knowledge_base = PDFKnowledgeBase(
        #urls=["https://agno-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf"],
        path="Knowledge/Semantic_Successive_Refinement_A_Generative_AI-Aided_Semantic_Communication_Framework.pdf",
        #path="knowlegde/survey.pdf",
        vector_db=vector_db,
        reader=PDFReader(chunk=True),
    )
elif 'csv' == type:
    # Knowledge Base
    knowledge_base = CSVKnowledgeBase(
        #urls=["https://agno-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf"],
        path="Knowledge/Products_Modem_Management_Upgrade_Team.csv",
        #path="knowlegde/survey.pdf",
        vector_db=vector_db,
        reader=CSVReader(chunk=True),
    )
elif 'txt' == type:
    knowledge_base = TextKnowledgeBase(
        path="Knowledge/cases",
        vector_db=vector_db,
        reader = TextReader()
    )
#knowledge_base.load(recreate=False)

def lancedb_agent(user: str = "MotoAI"):
    run_id: Optional[str] = None

    agent = Agent(
        #run_id=run_id,
        model=OllamaTools(
            #id="llama3.1:8b",
            id="llama3.2"
            #id="deepseek-r1:8b",
            #max_tokens=4096,
            #base_url="https://huggingface.co/meta-llama/Meta-Llama-3-8B-Instruct",
        ), 
        markdown=True,
        name="Iury AI",
        user_id=user,
        knowledge=knowledge_base,
        show_tool_calls=True,
        debug_mode=True,
        read_tool_call_history = True,
        description=dedent("""\
        You are a distinguished analist with expertise in csv files
        with analyzing and synthesizing complex information. Your specialty is analyses the csv files and check the lines and rows, 
        get links present in your knowlegde base associate with request
        and check the similarity of the another lines and/or rows are similar fact-based reports that uses the knowledge.

        Your writing style is:
        - Clear
        - professional
        - Fact-focused with proper citations\
    """),
    instructions=dedent("""\
        Analyses the csv files and check the lines and rows, 
        get links present in your knowlegde base associate with request
        and check the similarity of the another lines and/or rows are similar fact-based reports that uses the knowledge.\
    """),
    expected_output=dedent("""\
    # {Compelling Title That Captures the Topic's Essence}

    ## Summary
    {Brief overview of key findings and significance}

    ## Key Findings
    {Major discoveries or evidence}
    {Supporting evidence and analysis}

    ## Implications
    {Associate the feature with another similar or complementary feature}
   

    ## Key Takeaways
    - {Bullet point 1}
    - {Bullet point 2}
    - {Bullet point 3}

    ## References
    - [Source 1](link) - Key finding/quote
    - [Source 2](link) - Key finding/quote
    - [Source 3](link) - Key finding/quote

    ---
    Report generated by analist research
    Advanced Research Systems Division
    Date: {current_date}\
    """),
    )

    if run_id is None:
        run_id = agent.run_id
        print(f"Started Run: {run_id}\n")
    else:
        print(f"Continuing Run: {run_id}\n")

    while True:
        message = Prompt.ask(f"[bold] :robot: {user} [/bold]")
        if message in ("exit", "bye"):
            break
        agent.print_response(message)

if __name__ == "__main__":
    # Comment out after first run
    knowledge_base.load(recreate=True)

    typer.run(lancedb_agent())
